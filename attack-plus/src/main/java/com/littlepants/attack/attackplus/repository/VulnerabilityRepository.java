package com.littlepants.attack.attackplus.repository;

import com.littlepants.attack.attackplus.entity.graph.Vulnerability;
import org.springframework.data.neo4j.repository.Neo4jRepository;
import org.springframework.data.neo4j.repository.query.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

/**
 * <p>
 *
 * </p>
 *
 * @author 厕所歌神李狗蛋
 * @version JAVA17
 * @since 2023/4/27
 */

public interface VulnerabilityRepository extends Neo4jRepository<Vulnerability,String> {
    /**
     * 通过资产ID查询存在该资产上的所有漏洞
     * MATCH (v:Vulnerability) MATCH(v)<-[r:EXIST]-(a:Asset {id : $id}) RETURN collect(v)
     * @return
     */
    @Query("MATCH (v:Vulnerability)<-[r:EXIST]-(a:Asset {id : $id}) RETURN v")
    List<Vulnerability> getVulnerabilityByAssetId(@Param("id") String id);

    /**
     * 查询存在资产上的所有漏洞
     * MATCH (v:Vulnerability) MATCH (v)<-[r:EXIST]->(a:Asset) RETURN v,collect(r),collect(a)
     */
    @Query("MATCH (v:Vulnerability)<-[r:EXIST]-(a:Asset) RETURN v,collect(r),collect(a)")
    List<Vulnerability> getVulnerabilitiesExistAsset();

    @Query("MATCH (v:Vulnerability)<-[r:EXIST]-(a:Asset {ip:$ip}) RETURN v")
    List<Vulnerability> getVulnerabilitiesByIP(@Param("ip") String ip);

    @Query("MATCH (v:Vulnerability) RETURN v")
    List<Vulnerability> getVulnerabilities();

    @Query("MATCH (v:Vulnerability) WHERE v.id = $id DETACH DELETE v")
    void deleteVulnerabilityById(@Param("id") String id);

    @Query("MATCH (v:Vulnerability{cve_id:$cveId})<-[r:EXIST]-(a:Asset) DELETE r")
    void deleteRelationByCVEId(@Param("cveId") String cveId);

    @Query("MATCH (v:Vulnerability) WHERE v.cve_id = $cveId DELETE v")
    void deleteVulnerabilityByCVEId(@Param("cveId")String cveId);
}
