package com.littlepants.attack.attackplus.service.impl;

import com.littlepants.attack.attackplus.entity.graph.Asset;
import com.littlepants.attack.attackplus.entity.graph.Vulnerability;
import com.littlepants.attack.attackplus.repository.VulnerabilityRepository;
import com.littlepants.attack.attackplus.service.VulnerabilityService;
import org.neo4j.driver.Record;
import org.neo4j.driver.types.TypeSystem;
import org.springframework.data.domain.Example;
import org.springframework.data.neo4j.core.Neo4jClient;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * <p>
 *
 * </p>
 *
 * @author 厕所歌神李狗蛋
 * @version JAVA17
 * @since 2023/4/27
 */
@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {
    final private VulnerabilityRepository vulnerabilityRepository;

    final private Neo4jClient neo4jClient;

    public VulnerabilityServiceImpl(VulnerabilityRepository vulnerabilityRepository, Neo4jClient neo4jClient) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.neo4jClient = neo4jClient;
    }

    @Override
    public List<Vulnerability> getAllVulnerabilities() {
        return vulnerabilityRepository.getVulnerabilities();
    }

    @Override
    public List<Vulnerability> getVulnerabilitiesExisted() {
        List<Vulnerability> vulnerabilities = (List<Vulnerability>) neo4jClient
                .query("MATCH (v:Vulnerability)<-[r:EXIST]-(a:Asset) RETURN v,collect(a) as a")
                .fetchAs(Vulnerability.class).mappedBy((TypeSystem t, Record r)->{
                    Map<String,Object> map = r.get("v").asMap();
                    List<Asset> assets = r.get("a")
                            .asList(v->new Asset(v.get("ip").asString()));
                    return new Vulnerability(map.get("cve_id").toString(),Double.parseDouble(map.get("cvss_v2").toString()),
                            Double.parseDouble(map.get("cvss_v3").toString()),map.get("risk_level").toString(),
                            map.get("name").toString(),map.get("synopsis").toString(),map.get("description").toString(),
                            map.get("solution").toString(), (List<String>) map.get("references"),
                            assets);
                }).all();
        return vulnerabilities;
    }

    @Override
    public List<Vulnerability> getVulnerabilitiesExistedOnAsset(String ip) {
        return vulnerabilityRepository.getVulnerabilitiesByIP(ip);
    }

    @Override
    public void createVulnerability(Vulnerability vulnerability) {
        vulnerabilityRepository.save(vulnerability);
    }

    @Override
    public Vulnerability getVulnerability(String cveId) {
        Vulnerability vulnerability = new Vulnerability();
        vulnerability.setCVEId(cveId);
        return vulnerabilityRepository.findOne(Example.of(vulnerability)).orElse(null);
    }

    @Override
    public void updateVulnerabilityById(Vulnerability vulnerability) {
        vulnerabilityRepository.save(vulnerability);
    }

    @Override
    public void deleteVulnerabilityById(String cveId) {
        vulnerabilityRepository.deleteRelationByCVEId(cveId);
        vulnerabilityRepository.deleteVulnerabilityByCVEId(cveId);
    }
}
